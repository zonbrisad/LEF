   1               		.file	"LEF_Led.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	LEF_LedInit
  12               	LEF_LedInit:
  13               	.LFB0:
  14               		.file 1 "src/LEF/LEF_Led.c"
   1:src/LEF/LEF_Led.c **** /**
   2:src/LEF/LEF_Led.c ****  * LEF - Lightweight Event Framework
   3:src/LEF/LEF_Led.c ****  *
   4:src/LEF/LEF_Led.c ****  * This file is part of LEF distribution
   5:src/LEF/LEF_Led.c ****  *
   6:src/LEF/LEF_Led.c ****  *---------------------------------------------------------------------------
   7:src/LEF/LEF_Led.c ****  * @brief   LED controll library.
   8:src/LEF/LEF_Led.c ****  *
   9:src/LEF/LEF_Led.c ****  * @file    LEF_Led.c
  10:src/LEF/LEF_Led.c ****  * @author  Peter Malmberg <peter.malmberg@gmail.com>
  11:src/LEF/LEF_Led.c ****  * @date    2016-11-30
  12:src/LEF/LEF_Led.c ****  * @licence GPLv2
  13:src/LEF/LEF_Led.c ****  *
  14:src/LEF/LEF_Led.c ****  *---------------------------------------------------------------------------
  15:src/LEF/LEF_Led.c ****  *
  16:src/LEF/LEF_Led.c ****  * LEF is distributed in the hope that it will be useful, but WITHOUT ANY
  17:src/LEF/LEF_Led.c ****  * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  18:src/LEF/LEF_Led.c ****  * FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  19:src/LEF/LEF_Led.c ****  *
  20:src/LEF/LEF_Led.c ****  * Source repository:
  21:src/LEF/LEF_Led.c ****  * https://github.com/zonbrisad/LEF
  22:src/LEF/LEF_Led.c ****  *
  23:src/LEF/LEF_Led.c ****  * 1 tab = 2 spaces
  24:src/LEF/LEF_Led.c ****  */
  25:src/LEF/LEF_Led.c **** 
  26:src/LEF/LEF_Led.c **** // Includes ---------------------------------------------------------------
  27:src/LEF/LEF_Led.c **** 
  28:src/LEF/LEF_Led.c **** #include "LEF_Led.h"
  29:src/LEF/LEF_Led.c **** 
  30:src/LEF/LEF_Led.c **** // Macros -----------------------------------------------------------------
  31:src/LEF/LEF_Led.c **** 
  32:src/LEF/LEF_Led.c **** // Variables --------------------------------------------------------------
  33:src/LEF/LEF_Led.c **** 
  34:src/LEF/LEF_Led.c **** // Prototypes -------------------------------------------------------------
  35:src/LEF/LEF_Led.c **** 
  36:src/LEF/LEF_Led.c **** // Code -------------------------------------------------------------------
  37:src/LEF/LEF_Led.c **** 
  38:src/LEF/LEF_Led.c **** void LEF_LedInit(LEF_Led *led) {
  15               		.loc 1 38 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  39:src/LEF/LEF_Led.c **** 	led->mode = LED_STATE_OFF;
  22               		.loc 1 39 0
  23 0000 FC01      		movw r30,r24
  24 0002 1082      		st Z,__zero_reg__
  25 0004 0895      		ret
  26               		.cfi_endproc
  27               	.LFE0:
  29               	.global	LEF_LedUpdate
  31               	LEF_LedUpdate:
  32               	.LFB1:
  40:src/LEF/LEF_Led.c **** }
  41:src/LEF/LEF_Led.c **** 
  42:src/LEF/LEF_Led.c **** #define LED_BLINK_LIMIT      40
  43:src/LEF/LEF_Led.c **** #define LED_FAST_BLINK_LIMIT 5
  44:src/LEF/LEF_Led.c **** 
  45:src/LEF/LEF_Led.c **** 
  46:src/LEF/LEF_Led.c **** uint8_t LEF_LedUpdate(LEF_Led *led) {
  33               		.loc 1 46 0
  34               		.cfi_startproc
  35               	.LVL1:
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  40 0006 FC01      		movw r30,r24
  41               	.LVL2:
  47:src/LEF/LEF_Led.c **** 	uint8_t limit;
  48:src/LEF/LEF_Led.c **** 	limit = 0;
  49:src/LEF/LEF_Led.c **** 	switch (led->mode) {
  42               		.loc 1 49 0
  43 0008 8081      		ld r24,Z
  44               	.LVL3:
  45 000a 8230      		cpi r24,lo8(2)
  46 000c 01F0      		breq .L4
  47 000e 8330      		cpi r24,lo8(3)
  48 0010 01F0      		breq .L9
  49 0012 8130      		cpi r24,lo8(1)
  50 0014 01F0      		breq .L16
  50:src/LEF/LEF_Led.c **** 		case LED_STATE_OFF: return 0; break;
  51               		.loc 1 50 0
  52 0016 80E0      		ldi r24,0
  53 0018 0895      		ret
  54               	.L9:
  49:src/LEF/LEF_Led.c **** 		case LED_STATE_OFF: return 0; break;
  55               		.loc 1 49 0
  56 001a 25E0      		ldi r18,lo8(5)
  57 001c 30E0      		ldi r19,0
  58 001e 85E0      		ldi r24,lo8(5)
  59               	.L5:
  60               	.LVL4:
  51:src/LEF/LEF_Led.c **** 		case LED_STATE_ON:  return 1; break;
  52:src/LEF/LEF_Led.c **** 		case LED_STATE_FAST_BLINK:
  53:src/LEF/LEF_Led.c **** 			limit = LED_FAST_BLINK_LIMIT - LED_BLINK_LIMIT;
  54:src/LEF/LEF_Led.c **** 		case LED_STATE_BLINK:
  55:src/LEF/LEF_Led.c **** 			limit += LED_BLINK_LIMIT;
  56:src/LEF/LEF_Led.c **** 			led->cnt++;
  61               		.loc 1 56 0
  62 0020 9181      		ldd r25,Z+1
  63 0022 9F5F      		subi r25,lo8(-(1))
  57:src/LEF/LEF_Led.c **** 
  58:src/LEF/LEF_Led.c **** 			if (led->cnt>limit) {
  64               		.loc 1 58 0
  65 0024 492F      		mov r20,r25
  66 0026 092E      		mov __tmp_reg__,r25
  67 0028 000C      		lsl r0
  68 002a 550B      		sbc r21,r21
  69 002c 2417      		cp r18,r20
  70 002e 3507      		cpc r19,r21
  71 0030 04F4      		brge .L14
  59:src/LEF/LEF_Led.c **** 				led->cnt = - limit;
  72               		.loc 1 59 0
  73 0032 982F      		mov r25,r24
  74 0034 9195      		neg r25
  75               	.L14:
  76 0036 9183      		std Z+1,r25
  50:src/LEF/LEF_Led.c **** 		case LED_STATE_ON:  return 1; break;
  77               		.loc 1 50 0
  78 0038 892F      		mov r24,r25
  79 003a 881F      		rol r24
  80 003c 8827      		clr r24
  81 003e 881F      		rol r24
  60:src/LEF/LEF_Led.c **** 			}
  61:src/LEF/LEF_Led.c **** 
  62:src/LEF/LEF_Led.c **** 			if (led->cnt<0)
  63:src/LEF/LEF_Led.c **** 				return 1;
  64:src/LEF/LEF_Led.c **** 			else
  65:src/LEF/LEF_Led.c **** 				return 0;
  66:src/LEF/LEF_Led.c **** 
  67:src/LEF/LEF_Led.c **** 			break;
  68:src/LEF/LEF_Led.c **** 		case LED_STATE_SINGLE_BLINK:
  69:src/LEF/LEF_Led.c **** 
  70:src/LEF/LEF_Led.c **** 		default: return 0;
  71:src/LEF/LEF_Led.c **** 	}
  72:src/LEF/LEF_Led.c **** }
  82               		.loc 1 72 0
  83 0040 0895      		ret
  84               	.LVL5:
  85               	.L4:
  49:src/LEF/LEF_Led.c **** 		case LED_STATE_OFF: return 0; break;
  86               		.loc 1 49 0
  87 0042 28E2      		ldi r18,lo8(40)
  88 0044 30E0      		ldi r19,0
  89 0046 88E2      		ldi r24,lo8(40)
  90 0048 00C0      		rjmp .L5
  91               	.L16:
  92 004a 0895      		ret
  93               		.cfi_endproc
  94               	.LFE1:
  96               	.global	LEF_LedSetState
  98               	LEF_LedSetState:
  99               	.LFB2:
  73:src/LEF/LEF_Led.c **** 
  74:src/LEF/LEF_Led.c **** void LEF_LedSetState(LEF_Led *led, LED_STATES state) {
 100               		.loc 1 74 0
 101               		.cfi_startproc
 102               	.LVL6:
 103               	/* prologue: function */
 104               	/* frame size = 0 */
 105               	/* stack size = 0 */
 106               	.L__stack_usage = 0
  75:src/LEF/LEF_Led.c **** 	led->mode = state;
 107               		.loc 1 75 0
 108 004c FC01      		movw r30,r24
 109 004e 6083      		st Z,r22
  76:src/LEF/LEF_Led.c **** 	led->cnt = - LED_BLINK_LIMIT;
 110               		.loc 1 76 0
 111 0050 28ED      		ldi r18,lo8(-40)
 112 0052 2183      		std Z+1,r18
 113 0054 0895      		ret
 114               		.cfi_endproc
 115               	.LFE2:
 117               	.Letext0:
 118               		.file 2 "/usr/lib/avr/include/stdint.h"
 119               		.file 3 "src/LEF/LEF_Led.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 LEF_Led.c
     /tmp/ccQo6P28.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccQo6P28.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccQo6P28.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccQo6P28.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccQo6P28.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccQo6P28.s:12     .text:0000000000000000 LEF_LedInit
     /tmp/ccQo6P28.s:31     .text:0000000000000006 LEF_LedUpdate
     /tmp/ccQo6P28.s:98     .text:000000000000004c LEF_LedSetState

NO UNDEFINED SYMBOLS
